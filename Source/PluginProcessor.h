/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
*/
class ChorusAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
	ChorusAudioProcessor();
    ~ChorusAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

	// =============================================================================
	void LFOBuffer();

	double interpolateLinear(double y0, double y1, double x, double x0);

	double interpolateLinearSample(double y0, double y1, double x, double x0);

	void resizeBuffers(AudioSampleBuffer& depthOSC, AudioSampleBuffer& delayOSC, AudioSampleBuffer& delayBufferL, AudioSampleBuffer& delayBufferR);

	// =============================================================================
	float delayTime, modRate, depth, wetDry, freq, Amp;

	int FS = 0;

	static const int N = 44100;

	AudioSampleBuffer delayBufferL;
	AudioSampleBuffer delayBufferR;
	AudioSampleBuffer depthOSC;
	AudioSampleBuffer delayOSC;

	float* depthOSCwp = {};
	float* delayBufferLwp = {};
	float* delayBufferRwp = {};
	float* delayOSCwp = {};

	const float *depthOSCrp;
	const float *delayOSCrp;
	const float *delayBufferLrp;
	const float *delayBufferRrp;

	int bidx = 0, ridx = 0;

	float pi = 3.14159265358979323846;

private:
	//==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ChorusAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
